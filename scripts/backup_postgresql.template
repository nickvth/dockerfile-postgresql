#!/bin/sh
#####################################################################################################################
# DBP = Database Backup Postgresql                                                                                  #
# Write Ahead Log(WAL) (archiving for postgres)                                                                     #
# Backup script for full Postgres backup with wal files.                                                            #
#####################################################################################################################

# After enter set -e in an interactive bash, bash will exit immediately if any command exits with non-zero
set -e

#functions that will be used

printHelp() {
    echo
    echo "Usage: backup_postgresql -i<instance name> -p<port number> -H<hostname>"
    echo
    echo "  -p  Port number"
    echo "  -H  Hostname"
    echo "  -h  this help screen"
    echo
    echo "Example: backup_postgresql -itestdb -p5432 -Htestdb.enovation.dev"
    echo
}

# Checks command line options (pass $@ as parameter).
checkOptions() {
    if [ $# -eq 0 ]; then
        printHelp
        exit 3
    fi

    while getopts p:H:h: OPT $@; do
            case $OPT in
                p) # Port number
                   PORT="$OPTARG"
                   ;;
                H)# Hostname
                   HOST="$OPTARG"
                   ;;
                h) printHelp
                   exit 3
                   ;;
            esac
    done

     if [ -z $PORT ]; then
                echo "Port is not set"
                printHelp
                exit 3
     elif [ -z $HOST ]; then
                echo "Hostname is not set"
                printHelp
                exit 3
     fi
}

get_timestamp () {
  date_str="`/bin/date +%d'-'%m'-'%Y`"
  time_str="`/bin/date +%H'_'%M'_'%S`"
  time_stamp="--> $date_str"_"$time_str <--"
  }

#function check options
checkOptions $@

#Set variables
export PGHOST=$HOST
export PGPORT=$PORT
export PGUSER=pgusr
export PGDATA=data
export PGWAL=wal
export PGPASSWORD=pgpass
export LOGDIR=/pgbackup/log/
export BACKUP_LOG=$LOGDIR/pg_backup_log
export BACKUPS=/pgbackup
export LOCK=/pgbackup/lock

if [ -f $LOCK/psql_backup_in_progress ]; then
        echo "Backup already running, check $LOCK/psql_backup_in_progress"
        exit
else
        /bin/touch $LOCK/psql_backup_in_progress
fi

# Go to default directory
cd /var/lib/postgresql

# Get timestamp from function.
get_timestamp

# Set log file and touch.
LOGFILE=${BACKUP_LOG}_${date_str}_$time_str
/bin/touch $LOGFILE

# Delete old backup logs.
find $BACKUP_LOG* -mtime +keepvers -exec rm -f {} \;
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Old backup logs are deleted" >> $LOGFILE 2>&1

# Delete old backups.
FILESBAK=`find $BACKUPS -name pgbackup_*`
if [ -n "$FILESBAK" ];
then
find $BACKUPS/pgbackup_*  -mtime +keepvers -exec rm -f {} \;
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Old backup(s) are deleted" >> $LOGFILE 2>&1
fi

# Delete old backups.
FILESWAL=`find $BACKUPS -name pgwals_*`
if [ -n "$FILESWAL" ];
then
find $BACKUPS/pgwals_*  -mtime +keepvers -exec rm -f {} \;
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Old backup(s) are deleted" >> $LOGFILE 2>&1
fi

# base backup with wal files.
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Start Hot Backup" >> $LOGFILE 2>&1
/usr/bin/psql -h $PGHOST -d postgres -c "select pg_start_backup('Hot_Backup to $BACKUPS');" >> $LOGFILE 2>&1

# Start tar of base dir and wal files
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Starting tar of base dir and wal files" >> $LOGFILE 2>&1
/bin/tar --exclude $PGDATA/pg_xlog -cvzpf $BACKUPS/pgbackup_"$date_str"_"$time_str".tgz $PGDATA/ | tee -a $LOGFILE >/dev/null
sleep 2

findwalfiles=`find $PGWAL/ -maxdepth 1 -type f`
if [ -n "$findwalfiles" ];
then
/bin/tar -cvzpf $BACKUPS/pgwals_"$date_str"_"$time_str".tgz `find $PGWAL/ -maxdepth 1 -type f` >> $LOGFILE 2>&1
fi
# Tar finished stop backup.
/usr/bin/psql -h $PGHOST -d postgres -c "select pg_stop_backup();" >> $LOGFILE 2>&1
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Tar of base dir and wal files is finished" >> $LOGFILE 2>&1

# Delete old wal file older then a day..
find /var/lib/postgresql/wal/ -maxdepth 1 -type f -mmin +120 -exec rm -f {} \;
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Old wal files are deleted" >> $LOGFILE 2>&1

# Remove lock file
/bin/rm $LOCK/psql_backup_in_progress
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Lock file removed" >> $LOGFILE 2>&1

# Inform log file that the script complete successfully.
NOW=`/bin/date +"%b %d %H:%M:%S"`
/bin/echo "$NOW Backup script complete successfully" >> $LOGFILE 2>&1
